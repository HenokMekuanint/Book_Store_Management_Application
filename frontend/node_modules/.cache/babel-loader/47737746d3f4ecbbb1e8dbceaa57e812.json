{"ast":null,"code":"import axios from \"axios\";\nimport { CART_CLEAR_ITEM } from \"../Constants/CartConstants\";\nimport { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL, ORDER_CREATE_RESET } from \"../Constants/OrderConstants\";\nimport { logout } from \"./userActions\"; //CREATE ORDER\n\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/orders`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: CART_CLEAR_ITEM,\n      payload: data\n    });\n    localStorage.removeItem(\"cartItems\");\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Henok/final/frontend/src/Redux/Actions/OrderActions.js"],"names":["axios","CART_CLEAR_ITEM","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_CREATE_RESET","logout","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","post","payload","localStorage","removeItem","error","message","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,oBAAT,EAA8BC,oBAA9B,EAAmDC,iBAAnD,EAAqEC,kBAArE,QAA+F,6BAA/F;AACA,SAAQC,MAAR,QAAqB,eAArB,C,CAKA;;AACA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAU,OAAOC,QAAP,EAAgBC,QAAhB,KAA2B;AAC5D,MAAG;AACCD,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAACT;AAAN,KAAD,CAAR;AAEA,UAAM;AACFU,MAAAA,SAAS,EAAC;AAACC,QAAAA;AAAD;AADR,QAEHH,QAAQ,EAFX;AAIA,UAAMI,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAC;AACJ,wBAAe,kBADX;AAEJC,QAAAA,aAAa,EAAE,UAASH,QAAQ,CAACI,KAAM;AAFnC;AADG,KAAf;AAMA,UAAM;AAACC,MAAAA;AAAD,QAAO,MAAMlB,KAAK,CAACmB,IAAN,CAAY,aAAZ,EAAyBX,KAAzB,EAA+BM,MAA/B,CAAnB;AAEAL,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAACR,oBAAN;AAA2BiB,MAAAA,OAAO,EAACF;AAAnC,KAAD,CAAR;AACAT,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAACV,eAAN;AAAsBmB,MAAAA,OAAO,EAACF;AAA9B,KAAD,CAAR;AAEAG,IAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB;AACH,GAnBD,CAmBC,OAAMC,KAAN,EAAY;AACT,UAAMC,OAAO,GACbD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBM,OAAtC,GACED,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBM,OADtB,GAECD,KAAK,CAACC,OAHP;;AAIA,QAAIA,OAAO,KAAK,8BAAhB,EAAgD;AAC5Cf,MAAAA,QAAQ,CAACH,MAAM,EAAP,CAAR;AACH;;AACDG,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACP,iBADA;AAELgB,MAAAA,OAAO,EAACI;AAFH,KAAD,CAAR;AAMH;AACJ,CAnCM","sourcesContent":["import axios from \"axios\";\r\nimport { CART_CLEAR_ITEM } from \"../Constants/CartConstants\";\r\nimport { ORDER_CREATE_REQUEST,ORDER_CREATE_SUCCESS,ORDER_CREATE_FAIL,ORDER_CREATE_RESET } from \"../Constants/OrderConstants\";\r\nimport {logout} from \"./userActions\"\r\n\r\n\r\n\r\n\r\n//CREATE ORDER\r\nexport const createOrder = (order)=> async (dispatch,getState)=>{\r\n    try{\r\n        dispatch({type:ORDER_CREATE_REQUEST});\r\n\r\n        const {\r\n            userLogin:{userInfo},\r\n        }= getState();\r\n        \r\n        const config = {\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                Authorization:`Bearer ${userInfo.token}`\r\n            },\r\n        };\r\n        const {data}=await axios.post(`/api/orders`,order,config);\r\n\r\n        dispatch({type:ORDER_CREATE_SUCCESS,payload:data});\r\n        dispatch({type:CART_CLEAR_ITEM,payload:data});\r\n\r\n        localStorage.removeItem(\"cartItems\");    \r\n    }catch(error){\r\n        const message = \r\n        error.response && error.response.data.message \r\n        ? error.response.data.message\r\n        :error.message;\r\n        if (message === \"Not authorized, token failed\") {\r\n            dispatch(logout())\r\n        }\r\n        dispatch({\r\n            type:ORDER_CREATE_FAIL,\r\n            payload:message\r\n        })\r\n\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}